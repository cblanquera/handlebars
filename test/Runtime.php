<?php //-->
/**
 * This file is part of the Handlebars PHP Template Engine.
 *
 * Copyright and license information can be found at LICENSE.txt
 * distributed with this package.
 */

namespace HandlebarsPHP;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class Runtime_Test extends PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //reset the helpers and partials after every test
        (new Handler())->reset();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers HandlebarsPHP\Runtime::flush
     */
    public function testFlush()
    {
        //simple helper
        Runtime::registerHelper('root', function() {
            return '/some/root';
        });

        Runtime::flush();
        $helper = Runtime::getHelper('root');
        $this->assertNull($helper);
    }

    /**
     * @covers HandlebarsPHP\Runtime::getHelper
     */
    public function testGetHelper()
    {
        Runtime::registerHelper('foo', function() {});
        $this->assertInstanceOf('Closure', Runtime::getHelper('foo'));
        $this->assertNull(Runtime::getHelper('bar'));
    }

    /**
     * @covers HandlebarsPHP\Runtime::getHelpers
     */
    public function testGetHelpers()
    {
        $helpers = Runtime::getHelpers();
        $this->assertTrue(is_array($helpers));
    }

    /**
     * @covers HandlebarsPHP\Runtime::getPartial
     */
    public function testGetPartial()
    {
        Runtime::registerPartial('foo', 'bar');
        $this->assertTrue(is_string(Runtime::getPartial('foo')));
        $this->assertNull(Runtime::getPartial('foobar'));
    }

    /**
     * @covers HandlebarsPHP\Runtime::getPartials
     */
    public function testGetPartials()
    {
        $partials = Runtime::getPartials();
        $this->assertTrue(is_array($partials));
    }

    /**
     * @covers HandlebarsPHP\Runtime::registerHelper
     */
    public function testRegisterHelper()
    {
        Runtime::registerHelper('foo', function() {});
        $this->assertInstanceOf('Closure', Runtime::getHelper('foo'));
    }

    /**
     * @covers HandlebarsPHP\Runtime::registerPartial
     */
    public function testRegisterPartial()
    {
        Runtime::registerPartial('foo', 'bar');
        $this->assertTrue(is_string(Runtime::getPartial('foo')));
    }

    /**
     * @covers HandlebarsPHP\Runtime::unregisterHelper
     */
    public function testUnregisterHelper()
    {
        Runtime::unregisterHelper('if');
        $this->assertNull(Runtime::getHelper('if'));
    }

    /**
     * @covers HandlebarsPHP\Runtime::unregisterPartial
     */
    public function testUnregisterPartial()
    {
        Runtime::registerPartial('foo', 'bar');
        Runtime::unregisterPartial('foo');

        $this->assertNull(Runtime::getPartial('foo'));
    }
}
